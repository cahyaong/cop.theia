<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\packages\JetBrains.Annotations.10.4.0\lib\net\JetBrains.Annotations.dll" #>
<#@ assembly name="$(TargetDir)nGratis.Cop.Core.Contract.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Diagnostics.CodeAnalysis" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="JetBrains.Annotations" #>
<#@ import namespace="nGratis.Cop.Core.Contract" #>
<#@ output extension=".cs" #>
<#
    var ensureMethods = typeof(Guard.Ensure)
        .GetMethods(BindingFlags.Public | BindingFlags.Static)
        .Where(method => method.GetParameters().Any(parameter => parameter.Name == "reason"))
        .Where(method => method.ReturnType == typeof(void))
        .ToArray();

    var typeLookup = new Dictionary<Type, string>
    {
        [typeof(object)] = "object",
        [typeof(bool)] = "bool",
        [typeof(string)] = "string",
        [typeof(int)] = "int",
        [typeof(long)] = "long",
        [typeof(float)] = "float",
        [typeof(double)] = "double"
    };
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FILENAME" company="nGratis">
//  The MIT License (MIT)
//
//  Copyright (c) 2014 - 2016 Cahya Ong
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </copyright>
// <author>Cahya Ong - cahya.ong@gmail.com</author>
// <creation_timestamp>Friday, 24 March 2017 10:30:19 PM UTC</creation_timestamp>
//
//     _  _   _ _____ ___       ___ ___ _  _ ___ ___    _ _____ ___ ___    _____ _ _  
//    /_\| | | |_   _/ _ \ ___ / __| __| \| | __| _ \  /_\_   _| __|   \  |_   _| | | 
//   / _ \ |_| | | || (_) |___| (_ | _|| .` | _||   / / _ \| | | _|| |) |   | | |_  _|
//  /_/ \_\___/  |_| \___/     \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/    |_|   |_| 
//
// </remark>
// --------------------------------------------------------------------------------------------------------------------

// ReSharper disable RedundantTypeArgumentsOfMethod

namespace nGratis.Cop.Core.Contract
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using JetBrains.Annotations;

    public static partial class Guard
    {
        public static partial class Ensure
        {
<#
    var index = 0;

    foreach (var method in ensureMethods)
    {
        var parameters = method
            .GetParameters()
            .Where(parameter => parameter.Name != "reason")
            .ToArray();

        var parameterTokens = parameters
            .Select(parameter =>
                {
                    var typeName = string.Empty;

                    var isEnumerableType = 
                        parameter.ParameterType != typeof(string) &&
                        typeof(IEnumerable).IsAssignableFrom(parameter.ParameterType);

                    if (isEnumerableType)
                    {
                        typeName = $"IEnumerable<T>";
                    }
                    else if (!typeLookup.TryGetValue(parameter.ParameterType, out typeName))
                    {
                        typeName = parameter.ParameterType.Name;
                    }

                    return $"{typeName} {parameter.Name}";
                })
            .ToArray();

        var parameterNames = parameters
            .Select(parameter => parameter.Name)
            .ToArray();

        var generic = method.IsGenericMethod 
            ? "<T>"
            : string.Empty;

        var attributeLine = this.BuildAttributeLine(method);

        if (!string.IsNullOrEmpty(attributeLine))
        {
#>
            <#= attributeLine #>
<#
        }
#>
            public static void <#= method.Name #><#= generic #>(<#= string.Join(", ", parameterTokens) #>)
<#
        if (method.IsGenericMethod && method.Name != "IsTypeOf")
        {
#>
                where T : class
<#
        }
#>
            {
                Guard.Ensure.<#= method.Name #><#= generic #>(<#= string.Join(", ", parameterNames) #>, null);
            }
<#
        if (index < ensureMethods.Length - 1)
        {
#>

<#
        }

        index++;
    }
#>
        }
    }
}

// ReSharper restore RedundantTypeArgumentsOfMethod
<#+
    public string BuildAttributeLine(MethodInfo method)
    {
        var paddingLength = 12;
        var lineBuilder = new StringBuilder();
        var attributes = method.GetCustomAttributes().ToArray();

        for (var index = 0; index < attributes.Length; index++)
        {
            var attribute = attributes[index];
            var arguments = new List<string>();

            switch (attribute)
            {
                case ContractAnnotationAttribute contractAttribute:
                    arguments.Add(contractAttribute.Contract);
                    break;

                case SuppressMessageAttribute suppressionAttribute:
                    arguments.Add(suppressionAttribute.Category);
                    arguments.Add(suppressionAttribute.CheckId);
                    break;

                default:
                    break;
            }

            lineBuilder
                .Append(index <= 0 ? string.Empty : string.Empty.PadLeft(paddingLength, ' '))
                .Append($"[{attribute.GetType().Name.Replace("Attribute", string.Empty)}")
                .Append(arguments.Any() ? "(" : string.Empty)
                .Append(string.Join(", ", arguments.Select(argument => $"\"{argument}\"").ToArray()))
                .Append(arguments.Any() ? ")" : string.Empty)
                .Append("]")
                .Append(index >= attributes.Length - 1 ? string.Empty : Environment.NewLine);
        }

        return lineBuilder.ToString();
    }
#>