<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    var numericalLookup = new Dictionary<string, NumericalInfo>
    {
        ["int"] = new NumericalInfo(false, "0"),
        ["long"] = new NumericalInfo(false, "0"),
        ["float"] = new NumericalInfo(true, "0.0F"),
        ["double"] = new NumericalInfo(true, "0.0")
    };
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Guard.All.Numerical.cs" company="nGratis">
//  The MIT License (MIT)
//
//  Copyright (c) 2014 - 2017 Cahya Ong
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </copyright>
// <author>Cahya Ong - cahya.ong@gmail.com</author>
// <creation_timestamp>Friday, 17 March 2017 11:20:18 PM UTC</creation_timestamp>
// <remark>
//
//     _  _   _ _____ ___       ___ ___ _  _ ___ ___    _ _____ ___ ___    _____ _ _  
//    /_\| | | |_   _/ _ \ ___ / __| __| \| | __| _ \  /_\_   _| __|   \  |_   _| | | 
//   / _ \ |_| | | || (_) |___| (_ | _|| .` | _||   / / _ \| | | _|| |) |   | | |_  _|
//  /_/ \_\___/  |_| \___/     \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/    |_|   |_| 
//
// </remark>
// --------------------------------------------------------------------------------------------------------------------

namespace nGratis.Cop.Core.Contract
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using JetBrains.Annotations;

    public static partial class Guard
    {
        public static partial class Require
        {
<#
    var index = 0;

    foreach (var numerical in numericalLookup.Keys)
    {
        var isFloatingPoint = numericalLookup[numerical].IsFloatingPoint;

        var epsilonValue = isFloatingPoint
            ? $"{numerical}.Epsilon"
            : numericalLookup[numerical].ZeroValue;

        var zeroComparison = isFloatingPoint
            ? $"value >= -{epsilonValue} && value <= {epsilonValue}"
            : $"value == {epsilonValue}";

        var notZeroComparison = isFloatingPoint
            ? $"value < -{epsilonValue} || value > {epsilonValue}"
            : $"value != {epsilonValue}";

        var equalComparison = isFloatingPoint
            ? $"Math.Abs(value - anotherValue) <= {numerical}.Epsilon"
            : "value == anotherValue";

        var notEqualComparison = isFloatingPoint
            ? $"Math.Abs(value - anotherValue) > {numerical}.Epsilon"
            : "value != anotherValue";
#>
            [DebuggerStepThrough]
            public static void IsLessThan(<#= numerical #> value, <#= numerical #> anotherValue)
            {
                if (value >= anotherValue)
                {
                    Fire.PreconditionException($"Value [{value}] must be less than [{anotherValue}].");
                }
            }

            [DebuggerStepThrough]
            public static void IsGreaterThan(<#= numerical #> value, <#= numerical #> anotherValue)
            {
                if (value <= anotherValue)
                {
                    Fire.PreconditionException($"Value [{value}] must be greater than [{anotherValue}].");
                }
            }

            
            [DebuggerStepThrough]
            public static void IsZeroOrPositive(<#= numerical #> value)
            {
                if (value <= <#= numericalLookup[numerical].ZeroValue #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be zero or positive.");
                }
            }

            [DebuggerStepThrough]
            public static void IsPositive(<#= numerical #> value)
            {
                if (value < <#= numericalLookup[numerical].ZeroValue #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be positive.");
                }
            }

            [DebuggerStepThrough]
            public static void IsZeroNegative(<#= numerical #> value)
            {
                if (value > <#= numericalLookup[numerical].ZeroValue #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be zero or negative.");
                }
            }

            [DebuggerStepThrough]
            public static void IsNegative(<#= numerical #> value)
            {
                if (value >= <#= numericalLookup[numerical].ZeroValue #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be negative.");
                }
            }

            [DebuggerStepThrough]
            public static void IsZero(<#= numerical #> value)
            {
                if (<#= notZeroComparison #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be zero.");
                }
            }

            [DebuggerStepThrough]
            public static void IsNotZero(<#= numerical #> value)
            {
                if (<#= zeroComparison #>)
                {
                    Fire.PreconditionException($"Value [{value}] must not be zero.");
                }
            }

            [DebuggerStepThrough]
            public static void IsEqualTo(<#= numerical #> value, <#= numerical #> anotherValue)
            {
                if (<#= notEqualComparison #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be equal to [{anotherValue}].");
                }
            }

            [DebuggerStepThrough]
            public static void IsNotEqualTo(<#= numerical #> value, <#= numerical #> anotherValue)
            {
                if (<#= equalComparison #>)
                {
                    Fire.PreconditionException($"Value [{value}] must be not equal to [{anotherValue}].");
                }
            }
<#
        if (index < numericalLookup.Count() - 1)
        {
#>

<#
        }

        index++;
    }
#>
        }
    }
}
<#+
    public class NumericalInfo
    {
        public NumericalInfo(bool isFloatingPoint, string zeroValue)
        {
            this.IsFloatingPoint = isFloatingPoint;
            this.ZeroValue = zeroValue;
        }

        public bool IsFloatingPoint { get; }

        public string ZeroValue { get; }
    }
#>